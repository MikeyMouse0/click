const app = document.getElementById('app');
app.innerHTML = '<h1>UI —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>';

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const API_URL = "https://your-fastapi-server.com/api/verify-token"; // <-- –í–ê–ñ–ù–û: —Å—é–¥–∞ —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å FastAPI

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
function getData() {
  return JSON.parse(localStorage.getItem('steamkeydrop_data') || '{}');
}
function setData(data) {
  localStorage.setItem('steamkeydrop_data', JSON.stringify(data));
}
function resetData() {
  localStorage.removeItem('steamkeydrop_data');
  localStorage.removeItem('steamkeydrop_current_user');
}

// --- –ú–æ–¥–µ–ª–∏ ---
function getUser(id) {
  const data = getData();
  return data.users?.[id] || null;
}
function saveUser(user) {
  const data = getData();
  data.users = data.users || {};
  data.users[user.id] = user;
  setData(data);
}
function getAllUsers() {
  const data = getData();
  return Object.values(data.users || {});
}
function getCaseKeys(type) {
  const data = getData();
  return data.caseKeys?.[type] || [];
}
function addCaseKeys(type, keys) {
  const data = getData();
  data.caseKeys = data.caseKeys || {};
  data.caseKeys[type] = data.caseKeys[type] || [];
  data.caseKeys[type].push(...keys);
  setData(data);
}
function removeCaseKey(type, key) {
  const data = getData();
  data.caseKeys = data.caseKeys || {};
  data.caseKeys[type] = data.caseKeys[type] || [];
  data.caseKeys[type] = data.caseKeys[type].filter(k => k !== key);
  setData(data);
}
function getPromocodes() {
  const data = getData();
  return data.promocodes || [];
}
function addPromocode(promo) {
  const data = getData();
  data.promocodes = data.promocodes || [];
  data.promocodes.push(promo);
  setData(data);
}
function updatePromocode(code, update) {
  const data = getData();
  data.promocodes = data.promocodes || [];
  const idx = data.promocodes.findIndex(p => p.code === code);
  if (idx !== -1) Object.assign(data.promocodes[idx], update);
  setData(data);
}
function addLog(entry) {
  const data = getData();
  data.logs = data.logs || [];
  data.logs.unshift(entry);
  if (data.logs.length > 100) data.logs.length = 100;
  setData(data);
}
function getLogs() {
  const data = getData();
  return data.logs || [];
}
function setLastActivity(id) {
  const data = getData();
  data.lastActivity = data.lastActivity || {};
  data.lastActivity[id] = Date.now();
  setData(data);
}
function getLastActivity() {
  const data = getData();
  return data.lastActivity || {};
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ ---
function generateCode(len = 8) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let code = '';
  for (let i = 0; i < len; i++) code += chars[Math.floor(Math.random() * chars.length)];
  return code;
}

// --- Telegram —Ç–æ–∫–µ–Ω ---
function getTokenFromUrl() {
  const params = new URLSearchParams(window.location.search);
  return params.get('token');
}
async function verifyToken(token) {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ token })
    });
    return await res.json();
  } catch (e) {
    return { ok: false };
  }
}

// --- UI ---
const CASE_TYPES = [
  { name: '–û–±—ã—á–Ω—ã–π', chance: 0.7 },
  { name: '–≠–ø–∏—á–Ω—ã–π', chance: 0.2 },
  { name: '–ó–æ–ª–æ—Ç–æ–π', chance: 0.1 }
];
const ADMIN_IDS = ['808001329', '6201881953', '7079704828'];

const app = document.getElementById('app');
let currentUser = null;
let currentTab = 'market'; // market, profile, other, admin

function renderTabs() {
  let tabs = [
    { id: 'market', label: 'üõí –ú–∞—Ä–∫–µ—Ç' },
    { id: 'profile', label: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' },
    { id: 'other', label: '‚ú® –î—Ä—É–≥–æ–µ' }
  ];
  if (currentUser && currentUser.isAdmin) {
    tabs.push({ id: 'admin', label: '‚ö°Ô∏è –ê–¥–º–∏–Ω' });
  }
  return `
    <div class="tabs">
      ${tabs.map(tab => `
        <button class="tab${currentTab === tab.id ? ' active' : ''}" id="tab-${tab.id}">${tab.label}</button>
      `).join('')}
    </div>
  `;
}

function saveCurrentUserSession(id) {
  localStorage.setItem('steamkeydrop_current_user', id);
}
function clearCurrentUserSession() {
  localStorage.removeItem('steamkeydrop_current_user');
}
function getCurrentUserSession() {
  return localStorage.getItem('steamkeydrop_current_user');
}

function renderMain() {
  setLastActivity(currentUser.id);
  app.innerHTML = renderTabs() + `<div id="tab-content"></div>`;
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
  ['market', 'profile', 'other', 'admin'].forEach(tab => {
    const btn = document.getElementById('tab-' + tab);
    if (btn) btn.onclick = () => { currentTab = tab; renderMain(); };
  });
  // –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
  if (currentTab === 'market') renderMarket();
  else if (currentTab === 'profile') renderProfile();
  else if (currentTab === 'other') renderOther();
  else if (currentTab === 'admin') renderAdmin();
}

function renderMarket() {
  document.getElementById('tab-content').innerHTML = `
    <div class="card">
      <h3>–ú–∞—Ä–∫–µ—Ç</h3>
      <div>–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${currentUser.balance}</b></div>
      <button id="buyCaseBtn">–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)</button>
      <button id="promoUseBtn">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</button>
      <div id="marketResult"></div>
    </div>
  `;
  document.getElementById('buyCaseBtn').onclick = () => {
    if (currentUser.balance < 5) {
      document.getElementById('marketResult').innerHTML = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!';
      return;
    }
    let roll = Math.random();
    let acc = 0, caseType = CASE_TYPES[0].name;
    for (let ct of CASE_TYPES) {
      acc += ct.chance;
      if (roll < acc) { caseType = ct.name; break; }
    }
    let keys = getCaseKeys(caseType);
    if (!keys.length) {
      document.getElementById('marketResult').innerHTML = `–ö–ª—é—á–∏ –¥–ª—è ${caseType} –∫–µ–π—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!`;
      return;
    }
    const key = keys[Math.floor(Math.random() * keys.length)];
    removeCaseKey(caseType, key);
    currentUser.balance -= 5;
    currentUser.keys += 1;
    saveUser(currentUser);
    addLog({ time: new Date().toLocaleString(), text: `${currentUser.id} –æ—Ç–∫—Ä—ã–ª ${caseType} –∫–µ–π—Å: ${key}` });
    document.getElementById('marketResult').innerHTML = `–í–∞–º –≤—ã–ø–∞–ª <b>${caseType}</b> –∫–µ–π—Å!<br>–í–∞—à –∫–ª—é—á: <span class="case-key">${key}</span>`;
  };
  document.getElementById('promoUseBtn').onclick = () => {
    const code = prompt('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
    if (!code) return;
    const promo = getPromocodes().find(p => p.code === code);
    if (!promo) {
      document.getElementById('marketResult').innerHTML = '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!';
      return;
    }
    if (promo.uses >= promo.max_uses) {
      document.getElementById('marketResult').innerHTML = '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!';
      return;
    }
    updatePromocode(code, { uses: promo.uses + 1 });
    if (promo.reward_type === 'referrals') {
      currentUser.balance += Number(promo.reward_value);
      saveUser(currentUser);
      addLog({ time: new Date().toLocaleString(), text: `${currentUser.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${code}: +${promo.reward_value} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` });
      document.getElementById('marketResult').innerHTML = `–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +${promo.reward_value} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`;
    } else if (promo.reward_type === 'case') {
      let caseType = promo.reward_value;
      if (caseType === '–†–∞–Ω–¥–æ–º–Ω—ã–π') {
        let roll = Math.random();
        let acc = 0;
        for (let ct of CASE_TYPES) {
          acc += ct.chance;
          if (roll < acc) { caseType = ct.name; break; }
        }
      }
      let keys = getCaseKeys(caseType);
      if (!keys.length) {
        document.getElementById('marketResult').innerHTML = `–ö–ª—é—á–∏ –¥–ª—è ${caseType} –∫–µ–π—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!`;
        return;
      }
      const key = keys[Math.floor(Math.random() * keys.length)];
      removeCaseKey(caseType, key);
      currentUser.keys += 1;
      saveUser(currentUser);
      addLog({ time: new Date().toLocaleString(), text: `${currentUser.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${code}: ${caseType} –∫–µ–π—Å - ${key}` });
      document.getElementById('marketResult').innerHTML = `–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à ${caseType} –∫–µ–π—Å: <span class="case-key">${key}</span>`;
    }
  };
}

function renderProfile() {
  const refLink = location.href.split('#')[0] + `?ref=${currentUser.ref_code}`;
  document.getElementById('tab-content').innerHTML = `
    <div class="card">
      <h3>–ü—Ä–æ—Ñ–∏–ª—å</h3>
      <div>–ò–º—è: <b>${currentUser.username || currentUser.id}</b> ${currentUser.isAdmin ? '<span class="admin">admin</span>' : ''}</div>
      <div>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${currentUser.balance}</b></div>
      <div>–ö—É–ø–ª–µ–Ω–æ –∫–µ–π—Å–æ–≤: <b>${currentUser.keys}</b></div>
      <div>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:<br>
        <input value="${refLink}" readonly style="width:100%">
      </div>
      <button id="logoutBtn">–í—ã–π—Ç–∏</button>
    </div>
  `;
  document.getElementById('logoutBtn').onclick = () => { 
    clearCurrentUserSession();
    currentUser = null; 
    location.href = location.pathname; // —Å–±—Ä–æ—Å–∏—Ç—å —Ç–æ–∫–µ–Ω
  };
}

function renderOther() {
  document.getElementById('tab-content').innerHTML = `
    <div class="card">
      <h3>–î—Ä—É–≥–æ–µ</h3>
      <button id="bonusBtn">–ë–æ–Ω—É—Å—ã</button>
      <button id="helpBtn">–ü–æ–º–æ—â—å</button>
      <div id="otherContent"></div>
    </div>
  `;
  document.getElementById('bonusBtn').onclick = renderBonus;
  document.getElementById('helpBtn').onclick = renderHelp;
}

function renderBonus() {
  const refLink = location.href.split('#')[0] + `?ref=${currentUser.ref_code}`;
  document.getElementById('otherContent').innerHTML = `
    <div class="card">
      <h3>–ë–æ–Ω—É—Å—ã</h3>
      <div>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã!</div>
      <div>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:<br>
        <input value="${refLink}" readonly style="width:100%">
      </div>
      <div>–ó–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî 1 –∫–µ–π—Å.</div>
    </div>
  `;
}

function renderHelp() {
  document.getElementById('otherContent').innerHTML = `
    <div class="card">
      <h3>–ü–æ–º–æ—â—å</h3>
      <ul>
        <li>–ö–∞–∫ —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–∏? ‚Äî –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä—É—á–Ω—É—é.</li>
        <li>–ú–æ–∂–Ω–æ –ª–∏ –æ–±–º–µ–Ω—è—Ç—å –∫–ª—é—á? ‚Äî –ù–µ—Ç.</li>
        <li>–ü–æ—á–µ–º—É –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª? ‚Äî –í–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥ —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.</li>
      </ul>
    </div>
  `;
}

function renderAdmin() {
  document.getElementById('tab-content').innerHTML = `
    <div class="card">
      <h3>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h3>
      <button id="addKeysBtn">–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–∏</button>
      <button id="promoBtn">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</button>
      <button id="allKeysBtn">–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π</button>
      <button id="usersBtn">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
      <button id="broadcastBtn">–†–∞—Å—Å—ã–ª–∫–∞</button>
      <button id="searchUserBtn">–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
      <button id="onlineBtn">–û–Ω–ª–∞–π–Ω</button>
      <button id="logsBtn">–õ–æ–≥–∏</button>
      <button id="sendRefBtn">–ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã</button>
      <div id="adminContent"></div>
    </div>
  `;
  // ... (–ø–æ–¥–∫–ª—é—á–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)
}

// --- –ó–∞–ø—É—Å–∫ ---
(async function() {
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
  const token = getTokenFromUrl();
  if (!token) {
    app.innerHTML = `
      <div class="card" style="margin:40px auto;text-align:center;">
        <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
        <p>–î–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É —É <b>Telegram-–±–æ—Ç–∞</b>.</p>
      </div>
    `;
    return;
  }
  const result = await verifyToken(token);
  if (!result.ok) {
    app.innerHTML = `
      <div class="card" style="margin:40px auto;text-align:center;">
        <h2>–û—à–∏–±–∫–∞</h2>
        <p>–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.<br>–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —É –±–æ—Ç–∞.</p>
      </div>
    `;
    return;
  }
  // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
  let id = String(result.user_id);
  let user = getUser(id);
  if (!user) {
    user = {
      id,
      username: result.username,
      balance: 0,
      keys: 0,
      ref_code: generateCode(),
      refferer_id: null,
      isAdmin: ADMIN_IDS.includes(id)
    };
  } else {
    user.isAdmin = ADMIN_IDS.includes(id);
    user.username = result.username;
  }
  saveUser(user);
  currentUser = user;
  setLastActivity(currentUser.id);
  saveCurrentUserSession(currentUser.id);
  currentTab = 'market';
  renderMain();
})();
